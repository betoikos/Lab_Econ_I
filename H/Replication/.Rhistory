Xsample
n = 2 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
Xsample
n = 1 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
Xsample
# Algoritmo de Euclides para el máximo común divisor
# Input: dos números enteros cualesquiera a y b
# Output: el máximo común divisor de los dos números
mcd <- function(a, b)
{
A <- a;
B <- b;
while(B != 0) {
if(A>B){
A=A-B
} else {
B=B-A
}
}
return(A)
}
7 == 8
7 == 7
7 > 7
7 < 7
7 != 7
7 != 8
7 <= 8 # es 7 menor o igual a 8?
7 >= 8 # Es 7 mayor o igual a 8?
if(7 == 8){
print("Es correcto!!")
} else {
print("Es incorrecto!!")
}
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son iguales!!")
} else {
print("Los dos números son distintos!!")
}
a = 1
b = 1
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
help(function)
help("function")
help("function")
sqrt(25)
cuadrado = function(x){
y=x^2
return(y)
}
cuadrado(5)
raiz = function(x){
if(x<0){
print("El número es negativo y no me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(-1)
raiz = function(x){
if(x<0){
print("El número es negativo y no me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(9)
x = 1
while(x < 5) {x <- x+1; print(x);}
x = 1
while(x < 5) {
x <- x+1
print(x)
}
while(x < 8) {x <- x+1;
if (x == 3) next
print(x)}
x = 1
while(x < 8) {
x <- x+1
if (x == 3) next
print(x)
}
x = 1
while(x < 8) {
x <- x+1
if (x == 4) next
print(x)
}
for(i in 1:50){
print("Hello world!")
print(i*i)
}
for(i in 1:50){
print("Este es el loop",i)
print(i*i)
}
for(i in 1:50){
print("Este es el loop","i")
print(i*i)
}
for(i in 1:50){
print(paste("Este es el loop",i))
print(i*i)
}
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
hipo = function(a,b){
c = sqrt(a^2+b^2)
return(c)
}
hipo(3,4)
help("matrix")
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b+sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
chicha(1,1,-300)
# Aplicando la chicharronera en 2x^2+x-300
chicha(2,1,-300)
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b-sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
# Aplicando la chicharronera en 2x^2+x-300
chicha(2,1,-300)
# Aplicando la chicharronera en 2x^2+x-300
chicha(1,2,-1)
a=4
7==4
7 == 8 # Es 7 igual a ocho?
7 == 7 # Es 7 igual a 7?
7 != 7 # Es 7 distinto de 7?
7 != 8 # Es 7 distinto de 8?
7 > 7 # Es 7 mayor a 7?
7 < 7 # Es 7 menor a 7?
7 <= 8 # es 7 menor o igual a 8?
7 >= 8 # Es 7 mayor o igual a 8?
a = 1
b = 1
if(a == b){
print("Los dos números son iguales!!")
}
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
# Condicionales
a = 1
b = 7
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
# Verificando si el primer número es menor o igual al segundo
if(a <= b){
print(" a es menor o igual a b!")
} else {
print(" a es mayor a b!")
}
help("function")
sqrt(25) # Regresa la raíz cuadrada del argumento
# Cuadrado
# Input: un número real
# Output: el cuadrado del número real
cuadrado = function(z){
y=z^2
return(y)
}
cuadrado(5)
cuadrado(555555555555555555555)
# Raíz
# Input: un número real x
# Output: si x es positivo regresa la raíz del número, si no lo es entonces regresa un mensaje.
raiz = function(x){
if(x<0){
print("El número es negativo y me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(9)
# Hipotenusa
# Input: dos números reales a, b "altura" y "base"
# Output: un número real c, "hipotenusa"
hipo = function(a,b){
c = sqrt(a^2+b^2)
return(c)
}
hipo(3,4)
# Chicharronera para polinomios de la forma ax^2+bx+c
# Input: tres números reales a, b, c
# Output: si se cumple que b^2>=4ac entonces se obtienen las raíces del polinomio, sino, entonces se regresa un mensaje
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b-sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
# Aplicando la chicharronera en x^2+2x-1
chicha(1,2,-1)
x = 1
x = 1
while(x < 5) {
x = x+1
print(x)
}
x = 1
while(x < 8) {
x = x+1
if (x == 4) next
print(x)
}
###################################### For
for(i in 1:30){
print(paste("Este es el loop",i))
print(i*i)
}
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
year = 98798798798798
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
year = 98798798798798
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
# Algoritmo de Euclides para el máximo común divisor
# Input: dos números enteros reales a y b
# Output: el máximo común divisor de los dos números
mcd <- function(a, b){
A = a
B = b
if(A!=0){
while(B != 0) {
if(A>B){
A=A-B
} else {
B=B-A
}
}
return(A)
} else {
return(B)
}
}
gcd(25,15)
mcd(25,15)
mcd(10,7)
mcd(0,5)
mcd(8,0)
# Algoritmo para calcular MCO
# Input: matriz x de variables explicativas, matriz y de variables dependientes
# Output: vector b que miniza la suma de residuos al cuadrado en y=xb-U
MCO = function(x,y){
X=x
Y=y
xr=nrow(X)
yr=nrow(Y)
if(xr==yr){
b=solve(t(X)%*%X)%*%t(X)%*%Y
return(b)
} else {
print("No se puede llevar a cabo la operación, verifique las dimensiones de las matrices")
}
}
A=matrix(c(5,9,15,65,98,84,5,48,8,32,45,788,4,8,98,7,15,8),6)
A
B=matrix(5:10,6)
B
C=matrix(5:9,5)
C
MCO(A,B)
MCO(A,C)
n = 1 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
Xsample
n = 1 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
sx
help(rnorm)
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
n = 30 # Tamaño de la muestra
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
n = 1 # Tamaño de la muestra
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Xsample
n = 30 # Tamaño de la muestra
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Xsample
# by Humberto Martínez García
# hmartinez@colmex.mx
# Licence Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
# Heavily based on http://rpubs.com/dvorakt/183866 but updated. Results are more robust here.
getwd()
# Para fijar el directorio de trabajo deben usar el cÃ³digo de abajo.
# Utilicen el directorio de la carpeta con su nombre
setwd("C://Users/Humberto Martínez/Documents/GitHub/Lab_Econ_I/H/Replication")
# Verificar que el directorio se fijÃ³ correctamente
getwd()
library(XML)
library(dplyr)
library(tidyr)
library(httr)
sal2018 <- GET("http://www.usatoday.com/sports/mlb/salaries/2018/player/all/#card_full_width_main")
sal2018 <- readHTMLTable(rawToChar(sal2018$content))[[1]]
View(sal2018)
View(sal2018)
sal2017 <- GET("http://www.usatoday.com/sports/mlb/salaries/2017/player/all/#card_full_width_main")
sal2017 <- readHTMLTable(rawToChar(sal2017$content))[[1]]
sal2016 <- GET("http://www.usatoday.com/sports/mlb/salaries/2016/player/all/#card_full_width_main")
sal2016 <- readHTMLTable(rawToChar(sal2016$content))[[1]]
# problema con este año
# sal2015 <- GET("/MLBSalaries2015.html")
sal2015 <- readHTMLTable("MLBSalaries2015.html")[[1]]
sal2014 <- GET("http://www.usatoday.com/sports/mlb/salaries/2014/player/all/#card_full_width_main")
sal2014 <- readHTMLTable(rawToChar(sal2014$content))[[1]]
sal2013 <- GET("http://www.usatoday.com/sports/mlb/salaries/2013/player/all/#card_full_width_main")
sal2013 <- readHTMLTable(rawToChar(sal2013$content))[[1]]
sal2012 <- GET("http://www.usatoday.com/sports/mlb/salaries/2012/player/all/#card_full_width_main")
sal2012 <- readHTMLTable(rawToChar(sal2012$content))[[1]]
sal2011 <- GET("http://www.usatoday.com/sports/mlb/salaries/2011/player/all/#card_full_width_main")
sal2011 <- readHTMLTable(rawToChar(sal2011$content))[[1]]
View(sal2015)
View(sal2015)
sal2018$year <- 2018
sal2017$year <- 2017
sal2016$year <- 2016
sal2015$year <- 2015
sal2014$year <- 2014
sal2013$year <- 2013
sal2012$year <- 2012
sal2011$year <- 2011
help(bind_rows)
salaries <- bind_rows(sal2018,sal2017,sal2016,sal2015,sal2014,sal2013,sal2012,sal2011)
View(salaries)
View(salaries)
View(salaries)
View(salaries)
salaries <- select(salaries, -rank)
write.csv(salaries, "salaries.csv", row.names = FALSE)
salaries <- read.csv("salaries.csv")
salaries <- select(salaries, year, Salary, Name, Team)
View(salaries)
View(salaries)
str(salaries)
salaries$Salary <- as.numeric(gsub("[[:punct:]]","",salaries$Salary))
summary(salaries$Salary)
salaries <- arrange(salaries, Salary)
head(salaries, n=5)
tail(salaries, n=5)
salaries <- filter(salaries, Salary != 0)
salaries <- arrange(salaries, Salary)
head(salaries, n=5)
help(mutate)
salaries <- salaries %>% group_by(year, Team ) %>% mutate(payroll=sum(Salary), pctile=ntile(Salary,5))
View(salaries)
View(salaries)
salaries <- arrange(salaries, Salary)
head(salaries, n=3)
salaries <- filter(salaries, pctile==5)
salaries <- arrange(salaries, Salary)
head(salaries, n=3)
salaries <- salaries %>% group_by(year, Team, payroll) %>% summarize(top20=sum(Salary))
View(salaries)
View(salaries)
salaries$top20share <- salaries$top20/salaries$payroll*100
View(salaries)
View(salaries)
salaries$payroll <- salaries$payroll/1000000
summary(salaries)
salaries <- arrange(salaries, top20share)
head(salaries, n=3)
tail(salaries, n=3)
salaries$Team <- as.character(salaries$Team)
teamwins <- GET("http://www.baseball-reference.com/leagues/MLB/#teams_team_wins3000::none")
teamwins <- readHTMLTable(rawToChar(teamwins$content), stringsAsFactors = FALSE)[[1]]
write.csv(teamwins, "teamwins.csv", row.names = FALSE)
teamwins <- read.csv("teamwins.csv",stringsAsFactors = FALSE)
teamwins$Year <- as.numeric(teamwins$Year)
teamwins <- filter(teamwins, !is.na(teamwins$Year))
teamwins <- filter(teamwins, Year>2012)
View(teamwins)
View(teamwins)
teamwins <- unite(teamwins, year_games, Year, G)
teamwins2 <- gather(data=teamwins, value=wins, key=team, ARI,ATL,BLA,BAL,BOS,CHC,CHW,CIN,CLE,COL,DET,HOU,KCR,LAA,LAD,MIA,MIL,MIN,NYM,NYY,OAK,PHI,PIT,SDP,SFG,SEA,STL,TBR,TEX,TOR,WSN)
head(teamwins2)
View(teamwins2)
View(teamwins2)
# Nuevamente separamos años y juegos
teamwins2 <- separate(teamwins2,year_games, c("year", "games"))
head(teamwins2)
teamwins2$games <- as.numeric(teamwins2$games)
teamwins2$wins <- as.numeric(teamwins2$wins)
teamwins2$year <- as.numeric(teamwins2$year)
# Obtenemos el porcentaje de ganados
teamwins2$pctwin <- teamwins2$wins/teamwins2$games*100
teamwins2 <- arrange(teamwins2,pctwin)
summary(teamwins2)
summary(teamwins2)
head(teamwins2)
tail(teamwins2)
teamwins2 <- filter(teamwins2, !is.na(pctwin))
tail(teamwins2)
#Primero tenemos que homologar los códigos
salaries$Team[salaries$Team=="SF"] = "SFG"
salaries$Team[salaries$Team=="KC"] = "KCR"
salaries$Team[salaries$Team=="SD"] = "SDP"
salaries$Team[salaries$Team=="TB"] = "TBR"
salaries$Team[salaries$Team=="WSH"] = "WSN"
salaries$Team[salaries$Team=="CWS"] = "CHW"
# Homologando el nombre de la columna a Team
teamwins2$Team <- as.character(teamwins2$team)
teamwins2 <- select(teamwins2, -team)
merged <- inner_join(teamwins2, salaries,by=c("year", "Team"))
summary(merged)
View(merged)
View(merged)
write.csv(merged, "database2013_2018.csv", row.names = FALSE)
library(ggplot2)
ggplot(data=merged, aes(x=payroll,y=pctwin, label=Team, color=as.factor(year)))+ geom_text(size=3) +
ggtitle("Payroll and performance of MLB teams, 2013-2018") +
xlab("Payroll in millions") + ylab("Percent of games won") +
scale_color_discrete(name="year") + theme_minimal()
ggplot(data=merged, aes(x=top20share,y=pctwin, label=Team, color=as.factor(year))) + geom_text(size=3) +
ggtitle("Team inequality and performance of MLB teams, 2013-2018") +
xlab("Share of payroll earned by top 20%") + ylab("Percent of games won") +
scale_color_discrete(name="year") + theme_minimal()
# El paquete stargazer crea tablas para html, latex i ascii bien formateadas.
m1 <- lm(pctwin ~ top20share, data=merged)
m2 <- lm(pctwin ~ top20share + payroll, data=merged)
m3 <- lm(pctwin ~ top20share + log(payroll) , data=merged)
stargazer(m1,m2,m3, type="text")
library(stargazer)
# El paquete stargazer crea tablas para html, latex i ascii bien formateadas.
m1 <- lm(pctwin ~ top20share, data=merged)
m2 <- lm(pctwin ~ top20share + payroll, data=merged)
m3 <- lm(pctwin ~ top20share + log(payroll) , data=merged)
stargazer(m1,m2,m3, type="text")
