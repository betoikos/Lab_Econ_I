7 == 8
7 == 7
7 > 7
7 < 7
7 != 7
7 != 8
7 <= 8 # es 7 menor o igual a 8?
7 >= 8 # Es 7 mayor o igual a 8?
if(7 == 8){
print("Es correcto!!")
} else {
print("Es incorrecto!!")
}
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son iguales!!")
} else {
print("Los dos números son distintos!!")
}
a = 1
b = 1
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
help(function)
help("function")
help("function")
sqrt(25)
cuadrado = function(x){
y=x^2
return(y)
}
cuadrado(5)
raiz = function(x){
if(x<0){
print("El número es negativo y no me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(-1)
raiz = function(x){
if(x<0){
print("El número es negativo y no me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(9)
x = 1
while(x < 5) {x <- x+1; print(x);}
x = 1
while(x < 5) {
x <- x+1
print(x)
}
while(x < 8) {x <- x+1;
if (x == 3) next
print(x)}
x = 1
while(x < 8) {
x <- x+1
if (x == 3) next
print(x)
}
x = 1
while(x < 8) {
x <- x+1
if (x == 4) next
print(x)
}
for(i in 1:50){
print("Hello world!")
print(i*i)
}
for(i in 1:50){
print("Este es el loop",i)
print(i*i)
}
for(i in 1:50){
print("Este es el loop","i")
print(i*i)
}
for(i in 1:50){
print(paste("Este es el loop",i))
print(i*i)
}
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
hipo = function(a,b){
c = sqrt(a^2+b^2)
return(c)
}
hipo(3,4)
help("matrix")
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b+sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
chicha(1,1,-300)
# Aplicando la chicharronera en 2x^2+x-300
chicha(2,1,-300)
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b-sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
# Aplicando la chicharronera en 2x^2+x-300
chicha(2,1,-300)
# Aplicando la chicharronera en 2x^2+x-300
chicha(1,2,-1)
a=4
7==4
7 == 8 # Es 7 igual a ocho?
7 == 7 # Es 7 igual a 7?
7 != 7 # Es 7 distinto de 7?
7 != 8 # Es 7 distinto de 8?
7 > 7 # Es 7 mayor a 7?
7 < 7 # Es 7 menor a 7?
7 <= 8 # es 7 menor o igual a 8?
7 >= 8 # Es 7 mayor o igual a 8?
a = 1
b = 1
if(a == b){
print("Los dos números son iguales!!")
}
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
# Condicionales
a = 1
b = 7
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
# Verificando si el primer número es menor o igual al segundo
if(a <= b){
print(" a es menor o igual a b!")
} else {
print(" a es mayor a b!")
}
help("function")
sqrt(25) # Regresa la raíz cuadrada del argumento
# Cuadrado
# Input: un número real
# Output: el cuadrado del número real
cuadrado = function(z){
y=z^2
return(y)
}
cuadrado(5)
cuadrado(555555555555555555555)
# Raíz
# Input: un número real x
# Output: si x es positivo regresa la raíz del número, si no lo es entonces regresa un mensaje.
raiz = function(x){
if(x<0){
print("El número es negativo y me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(9)
# Hipotenusa
# Input: dos números reales a, b "altura" y "base"
# Output: un número real c, "hipotenusa"
hipo = function(a,b){
c = sqrt(a^2+b^2)
return(c)
}
hipo(3,4)
# Chicharronera para polinomios de la forma ax^2+bx+c
# Input: tres números reales a, b, c
# Output: si se cumple que b^2>=4ac entonces se obtienen las raíces del polinomio, sino, entonces se regresa un mensaje
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b-sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
# Aplicando la chicharronera en x^2+2x-1
chicha(1,2,-1)
x = 1
x = 1
while(x < 5) {
x = x+1
print(x)
}
x = 1
while(x < 8) {
x = x+1
if (x == 4) next
print(x)
}
###################################### For
for(i in 1:30){
print(paste("Este es el loop",i))
print(i*i)
}
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
year = 98798798798798
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
year = 98798798798798
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
# Algoritmo de Euclides para el máximo común divisor
# Input: dos números enteros reales a y b
# Output: el máximo común divisor de los dos números
mcd <- function(a, b){
A = a
B = b
if(A!=0){
while(B != 0) {
if(A>B){
A=A-B
} else {
B=B-A
}
}
return(A)
} else {
return(B)
}
}
gcd(25,15)
mcd(25,15)
mcd(10,7)
mcd(0,5)
mcd(8,0)
# Algoritmo para calcular MCO
# Input: matriz x de variables explicativas, matriz y de variables dependientes
# Output: vector b que miniza la suma de residuos al cuadrado en y=xb-U
MCO = function(x,y){
X=x
Y=y
xr=nrow(X)
yr=nrow(Y)
if(xr==yr){
b=solve(t(X)%*%X)%*%t(X)%*%Y
return(b)
} else {
print("No se puede llevar a cabo la operación, verifique las dimensiones de las matrices")
}
}
A=matrix(c(5,9,15,65,98,84,5,48,8,32,45,788,4,8,98,7,15,8),6)
A
B=matrix(5:10,6)
B
C=matrix(5:9,5)
C
MCO(A,B)
MCO(A,C)
n = 1 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
Xsample
n = 1 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
sx
help(rnorm)
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
n = 30 # Tamaño de la muestra
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
n = 1 # Tamaño de la muestra
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Xsample
n = 30 # Tamaño de la muestra
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Xsample
# Cargamos la librería y la base de datos
library("AER")
data("Journals")
# Obtener la ruta de trabajo actual
getwd()
# Para fijar el directorio de trabajo deben usar el código de abajo.
# Utilicen el directorio de la carpeta con su nombre
setwd("C://Users/Humberto Martínez/Documents/GitHub/Lab_Econ_I/H/R_drafts")
# Verificar que el directorio se fijó correctamente
getwd()
# Para guardar el script sólo es: ctrl+s
#Instalando los paquetes que usaremos
install.packages("AER")
install.packages("AER")
# Cargamos la librería y la base de datos
library("AER")
data("Journals")
summary(Journals)
JOURNAL = matrix(1:100)
a = 1
# Head() regresa los primeros elementos de un dataframe
head(Journals)
# Tail regresa los últimos elementos de un dataframe
tail(Journals)
pages
Journals
Journals$publisher
#Creamos una variable que diga el precio por cada cita
Journals$citeprice <- Journals$price/Journals$citations
# attach() permite acceder a los elementos de un dataframe "directamente"
attach(Journals)
pages
# plot() es la función básica para gráficos en R
plot(log(subs), log(citeprice))
# rug() añade barras para indicar sobre los ejes en donde se encuentra una observación
rug(log(subs))
rug(log(citeprice), side = 2)
# detach() cierra el "fácil acceso" al dataframe
detach(Journals)
pages
plot(log(subs) ~ log(citeprice), data = Journals)
plot(log(subs), log(citeprice), data = Journals)
plot(log(subs) ~ log(citeprice), data = Journals)
# Veamos la diferencia de plotear en niveles
plot(subs ~ citeprice, data = Journals)
# Exportando un gráfico a PDF
pdf("testPDF.pdf", height = 5, width = 6)
plot(subs ~ citeprice, data = Journals)
dev.off()
jpeg(filename = "testJPG.jpg",
width = 1000, height = 1000, units = "px")
plot(subs ~ citeprice, data = Journals)
dev.off()
png(filename = "testPNG.png",
width = 1000, height = 1000, units = "px")
plot(subs ~ citeprice, data = Journals)
dev.off()
hist(Journals$citeprice, freq = FALSE)
# Lines es un gráfico de línea, en este caso añade la apariencia de la densidad
lines(density(Journals$citeprice), col = 1)
lines(density(Journals$citeprice), col = 2) # Rojo
lines(density(Journals$citeprice), col = 3) # Verde
lines(density(Journals$citeprice), col = 4) # Azúl
lines(density(Journals$citeprice), col = 5) # Verde agua
lines(density(Journals$citeprice), col = 2) # Rojo
# Exportando el histograma a PDF
pdf("histoPDF.pdf", height = 5, width = 6)
hist(Journals$citeprice, freq = FALSE)
lines(density(Journals$citeprice), col = 2) # Rojo
dev.off()
# Embelleciendo el histograma
hist(Journals$citeprice,
freq = FALSE,
border = NULL,
main = paste("Distribución de el costo por cita"),
xlab = "USD por cita",
ylab = "Densidad")
lines(density(Journals$citeprice), col = 2) # Rojo
# Exportando nuevamente
pdf("histoPDFv2.pdf", height = 5, width = 6)
hist(Journals$citeprice,
freq = FALSE,
border = NULL,
main = paste("Distribución del costo por cita"),
xlab = "USD por cita",
ylab = "Densidad")
lines(density(Journals$citeprice), col = 2) # Rojo
dev.off()
# Distribución de frecuencias
hist(Journals$citeprice)
# Distribución de frecuencias
hist(Journals$citeprice)
lines(density(Journals$citeprice), col = 2) # Rojo
tab <- table(Journals$publisher)
tab
prop.table(tab)
barplot(tab)
pie(tab)
sortedtab = sort(tab, decreasing = TRUE)
sortedtab
main = sortedtab[1:6]
Editoriales = append(main,otros)
sortedtab = sort(tab, decreasing = TRUE)
otros = sum(sortedtab[7:52])
main = sortedtab[1:6]
Editoriales = append(main,otros)
Editoriales
# Eso hace a nuestros plots mucho más entendibles
barplot(Editoriales)
pie(Editoriales, main="Mayores editoriales de Journals")
# Exportando los plots
pdf("piePDF.pdf", height = 5, width = 6)
pie(Editoriales, main="Mayores editoriales de Journals")
dev.off()
## Muestras aleatorias normales
library(MASS)
n = 30 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Usample
Xsample
lbls <- c("US", "UK", "Australia", "Germany", "France")
index = matrix(1:30)
index
datos = cbind(index,Xsample)
datos
datosF = as.data.frame(datos)
datosF
colnames(Xsample)
colnames(Xsample) = lbls
Xsample
index = matrix(1:30)
index
datos = cbind(index,Xsample)
datosF = as.data.frame(datos)
datosF
plot_colors <- c("blue","red","forestgreen")
plot(datosF$US, type="o", col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
# Graph trucks with red dashed line and square points
lines(datosF$UK, type="o", pch=22, lty=2, col=plot_colors[2])
ph suvs with green dotted line and diamond points
lines(datosF$Australia, type="o", pch=23, lty=3, col=plot_colors[3])
# Create a title with a red, bold/italic font
title(main="Países", col.main="blue", font.main=4)
# specify them ourself
plot(datosF$US, type="o", col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
# Graph trucks with red dashed line and square points
lines(datosF$UK, type="o", pch=22, lty=5, col=plot_colors[2])
# specify them ourself
plot(datosF$US, type="o", col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
# Graph trucks with red dashed line and square points
lines(datosF$UK, type="o", pch=22, lty=5, col=plot_colors[2])
# Graph suvs with green dotted line and diamond points
lines(datosF$Australia, type="o", pch=23, lty=3, col=plot_colors[3])
# specify them ourself
plot(datosF$US, type="o", col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
# Graph trucks with red dashed line and square points
lines(datosF$UK, type="o", pch=2, lty=5, col=plot_colors[2])
# Graph suvs with green dotted line and diamond points
lines(datosF$Australia, type="o", pch=23, lty=3, col=plot_colors[3])
plot_colors <- c("blue","red","forestgreen")
# specify them ourself
plot(datosF$US, type="o", col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
# Graph trucks with red dashed line and square points
lines(datosF$UK, type="o", pch=2, lty=5, col=plot_colors[2])
# Graph suvs with green dotted line and diamond points
lines(datosF$Australia, type="o", pch=23, lty=3, col=plot_colors[3])
# Create a title with a red, bold/italic font
title(main="Países", col.main="blue", font.main=4)
legend(25, 13, c("UK","Australia", "US"), c("blue","red","forestgreen"),cex=0.5)
plot(datosF$US, col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
plot(datosF$US, type="o", col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
help(plot)
help(lines)
plot_colors <- c("blue","red","forestgreen")
# specify them ourself
plot(datosF$US, type="o", col=plot_colors[1], ylim=c(-2,13), ylab = "Crecimiento", xlab = "Periodos")
# Graph trucks with red dashed line and square points
lines(datosF$UK, type="o", pch=2, lty=5, col=plot_colors[2])
# Graph suvs with green dotted line and diamond points
lines(datosF$Australia, type="o", pch=23, lty=3, col=plot_colors[3])
# Create a title with a red, bold/italic font
title(main="Países", col.main="blue", font.main=4)
legend(25, 13, c("UK","Australia", "US"), c("blue","red","forestgreen"),cex=0.5)
