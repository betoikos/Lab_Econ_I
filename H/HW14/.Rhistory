7 < 7
7 != 7
7 != 8
7 <= 8 # es 7 menor o igual a 8?
7 >= 8 # Es 7 mayor o igual a 8?
if(7 == 8){
print("Es correcto!!")
} else {
print("Es incorrecto!!")
}
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son iguales!!")
} else {
print("Los dos números son distintos!!")
}
a = 1
b = 1
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
help(function)
help("function")
help("function")
sqrt(25)
cuadrado = function(x){
y=x^2
return(y)
}
cuadrado(5)
raiz = function(x){
if(x<0){
print("El número es negativo y no me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(-1)
raiz = function(x){
if(x<0){
print("El número es negativo y no me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(9)
x = 1
while(x < 5) {x <- x+1; print(x);}
x = 1
while(x < 5) {
x <- x+1
print(x)
}
while(x < 8) {x <- x+1;
if (x == 3) next
print(x)}
x = 1
while(x < 8) {
x <- x+1
if (x == 3) next
print(x)
}
x = 1
while(x < 8) {
x <- x+1
if (x == 4) next
print(x)
}
for(i in 1:50){
print("Hello world!")
print(i*i)
}
for(i in 1:50){
print("Este es el loop",i)
print(i*i)
}
for(i in 1:50){
print("Este es el loop","i")
print(i*i)
}
for(i in 1:50){
print(paste("Este es el loop",i))
print(i*i)
}
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
hipo = function(a,b){
c = sqrt(a^2+b^2)
return(c)
}
hipo(3,4)
help("matrix")
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b+sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
chicha(1,1,-300)
# Aplicando la chicharronera en 2x^2+x-300
chicha(2,1,-300)
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b-sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
# Aplicando la chicharronera en 2x^2+x-300
chicha(2,1,-300)
# Aplicando la chicharronera en 2x^2+x-300
chicha(1,2,-1)
a=4
7==4
7 == 8 # Es 7 igual a ocho?
7 == 7 # Es 7 igual a 7?
7 != 7 # Es 7 distinto de 7?
7 != 8 # Es 7 distinto de 8?
7 > 7 # Es 7 mayor a 7?
7 < 7 # Es 7 menor a 7?
7 <= 8 # es 7 menor o igual a 8?
7 >= 8 # Es 7 mayor o igual a 8?
a = 1
b = 1
if(a == b){
print("Los dos números son iguales!!")
}
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
# Condicionales
a = 1
b = 7
# Verificando si dos números son distintos
if(a != b){
print("Los dos números son distintos !!")
} else {
print("Los dos números son iguales !!")
}
# Verificando si el primer número es menor o igual al segundo
if(a <= b){
print(" a es menor o igual a b!")
} else {
print(" a es mayor a b!")
}
help("function")
sqrt(25) # Regresa la raíz cuadrada del argumento
# Cuadrado
# Input: un número real
# Output: el cuadrado del número real
cuadrado = function(z){
y=z^2
return(y)
}
cuadrado(5)
cuadrado(555555555555555555555)
# Raíz
# Input: un número real x
# Output: si x es positivo regresa la raíz del número, si no lo es entonces regresa un mensaje.
raiz = function(x){
if(x<0){
print("El número es negativo y me niego a regresarte números imaginarios")
} else {
return(sqrt(x))
}
}
raiz(9)
# Hipotenusa
# Input: dos números reales a, b "altura" y "base"
# Output: un número real c, "hipotenusa"
hipo = function(a,b){
c = sqrt(a^2+b^2)
return(c)
}
hipo(3,4)
# Chicharronera para polinomios de la forma ax^2+bx+c
# Input: tres números reales a, b, c
# Output: si se cumple que b^2>=4ac entonces se obtienen las raíces del polinomio, sino, entonces se regresa un mensaje
chicha = function(a,b,c){
cond = b^2 >=4*a*c
if(cond){
z1 = (-b+sqrt(b^2 - 4*a*c))/2*a
z2 = (-b-sqrt(b^2 - 4*a*c))/2*a
Z = matrix(c(z1,z2),1)
return(Z)
} else {
print("El polinomio tiene raíces complejas, por favor utiliza otro método")
}
}
# Aplicando la chicharronera en x^2+2x-1
chicha(1,2,-1)
x = 1
x = 1
while(x < 5) {
x = x+1
print(x)
}
x = 1
while(x < 8) {
x = x+1
if (x == 4) next
print(x)
}
###################################### For
for(i in 1:30){
print(paste("Este es el loop",i))
print(i*i)
}
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
year = 98798798798798
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
year = 98798798798798
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("Este es el año", year))
}
# Algoritmo de Euclides para el máximo común divisor
# Input: dos números enteros reales a y b
# Output: el máximo común divisor de los dos números
mcd <- function(a, b){
A = a
B = b
if(A!=0){
while(B != 0) {
if(A>B){
A=A-B
} else {
B=B-A
}
}
return(A)
} else {
return(B)
}
}
gcd(25,15)
mcd(25,15)
mcd(10,7)
mcd(0,5)
mcd(8,0)
# Algoritmo para calcular MCO
# Input: matriz x de variables explicativas, matriz y de variables dependientes
# Output: vector b que miniza la suma de residuos al cuadrado en y=xb-U
MCO = function(x,y){
X=x
Y=y
xr=nrow(X)
yr=nrow(Y)
if(xr==yr){
b=solve(t(X)%*%X)%*%t(X)%*%Y
return(b)
} else {
print("No se puede llevar a cabo la operación, verifique las dimensiones de las matrices")
}
}
A=matrix(c(5,9,15,65,98,84,5,48,8,32,45,788,4,8,98,7,15,8),6)
A
B=matrix(5:10,6)
B
C=matrix(5:9,5)
C
MCO(A,B)
MCO(A,C)
n = 1 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
Xsample
n = 1 # Tamaño de la muestra
mu = 0 # Media de U
su = 0.2 # Varianza de U
mx = c(4,2,0,0,2) # Vector de medias de X
sx = matrix(c(4,-1,0,0,0,
-1,1,0,0,0,
0,0,1,0,0,
0,0,0,9,2,
0,0,0,2,4),5) # Varianza de X
sx
help(rnorm)
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
n = 30 # Tamaño de la muestra
Usample = rnorm(n,mu,su) # Muestra aleatoria de U
Usample
n = 1 # Tamaño de la muestra
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Xsample
n = 30 # Tamaño de la muestra
Xsample = mvrnorm(n,mx,sx) # Muestra aleatoria de x1 y x2
Xsample
require(reshape2)
require(ggplot2)
help(melt)
# by Humberto Martínez García
# hmartinez@colmex.mx
# Licence Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
# Heavily based on http://rpubs.com/dvorakt/183866 but updated. Results are more robust here.
getwd()
# Para fijar el directorio de trabajo deben usar el cÃ³digo de abajo.
# Utilicen el directorio de la carpeta con su nombre
setwd("C://Users/Humberto Martínez/Documents/GitHub/Lab_Econ_I/H/HW14")
# Verificar que el directorio se fijÃ³ correctamente
getwd()
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("R")
load("meap93.RData")
library("stats")
View(data)
View(data)
View(desc)
View(desc)
meap93 = data
data2 = melt(data)
View(data2)
View(data2)
data2 = melt(data, id.vars='math10')
View(data2)
View(data2)
require(ggplot2)
require(reshape2)
data2 = melt(data, id.vars='math10')
ggplot(data2) + geom_jitter(aes(value,math10, colour=variable),) + geom_smooth(aes(value,math10, colour=variable), method=lm, se=FALSE)
+ facet_wrap(~variable, scales="free_x")+labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
##
ggplot(data2) + geom_jitter(aes(value,math10, colour=variable),) + geom_smooth(aes(value,math10, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Percentage cover (%)", y = "Number of individuals (N)")
View(desc)
View(desc)
ggplot(data2) + geom_jitter(aes(value,math10, colour=variable),) + geom_smooth(aes(value,math10, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Levels", y = "perc studs passing MEAP math")
# experiencia laboral corresponde un mejor salario.
load("wage1.RData")
library("stats")
View(data)
View(data)
View(data)
View(data)
help(log)
View(data)
View(data)
##
require(ggplot2)
require(reshape2)
data2 = melt(data, id.vars='lwage')
ggplot(data2) + geom_jitter(aes(value,lwage, colour=variable),) + geom_smooth(aes(value,lwage, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Levels", y = "perc studs passing MEAP math")
##
View(desc)
View(desc)
require(ggplot2)
require(reshape2)
data2 = melt(data, id.vars='lwage')
ggplot(data2) + geom_jitter(aes(value,lwage, colour=variable),) + geom_smooth(aes(value,lwage, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Levels", y = "log(average hourly earnings)")
##
load("meap93.RData")
library("stats")
##
require(ggplot2)
require(reshape2)
data2 = melt(data, id.vars='math10')
ggplot(data2) + geom_jitter(aes(value,math10, colour=variable),) + geom_smooth(aes(value,math10, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Levels", y = "perc studs passing MEAP math")
##
help("fortify")
reg0 = lm(lwage ~ educ + exper + tenure)
load("wage1.RData")
library("stats")
wage = matrix(data$wage)
educ = matrix(data$educ)
exper = matrix(data$exper)
tenure = matrix(data$tenure)
lwage = log(wage)
n = nrow(wage)
unos = matrix(1, nrow = n, ncol=1) # Vector de unos
X = matrix(c(unos, educ, exper, tenure),n)
k = ncol(X)
gl = n-k
##
require(ggplot2)
require(reshape2)
data2 = melt(data, id.vars='lwage')
ggplot(data2) + geom_jitter(aes(value,lwage, colour=variable),) + geom_smooth(aes(value,lwage, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Levels", y = "log(average hourly earnings)")
##
reg0 = lm(lwage ~ educ + exper + tenure)
reg0
#
require(ggplot2)
reg0res <- fortify(reg0)
ggplot(reg0res, aes(x = .fitted, y = .resid)) + geom_point()
#
library(ggfortify)
autoplot(reg0)
require(ggfortify)
install.packages("ggfortify")
require(ggfortify)
autoplot(reg0)
gvlma::gvlma(reg0)
install.packages("gvlma")
gvlma::gvlma(reg0)
gvlma(reg0)
#Checking if residuals are normal
require(ggfortify)
require(gvlma)
autoplot(reg0)
gvlma(reg0)
#
require(ggplot2)
reg0res <- fortify(reg0)
ggplot(reg0res, aes(x = .fitted, y = .resid)) + geom_point()
#
# Checking if residuals are normal
require(ggfortify)
require(gvlma)
autoplot(reg0)
gvlma(reg0)
#
load("meap93.RData")
library("stats")
math10 = matrix(data$math10)
totcomp = matrix(data$totcomp)
staff = matrix(data$staff)
enroll = matrix(data$enroll)
n = nrow(math10)
unos = matrix(1, nrow = n, ncol=1) # Vector de unos
X = matrix(c(unos, totcomp, staff, enroll),n)
k = ncol(X)
gl = n-k
reg1 = lm(math10 ~ totcomp + staff + enroll)
reg1
##
require(ggplot2)
require(reshape2)
data2 = melt(data, id.vars='math10')
ggplot(data2) + geom_jitter(aes(value,math10, colour=variable),) + geom_smooth(aes(value,math10, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Levels", y = "perc studs passing MEAP math")
##
# Ploting the residuals
require(ggplot2)
reg1res <- fortify(reg1)
ggplot(reg1res, aes(x = .fitted, y = .resid)) + geom_point()
#
# Checking if residuals are normal
require(ggfortify)
require(gvlma)
autoplot(reg1)
gvlma(reg1)
#
reg3 = lm(math10 ~ ltotcomp + lstaff + lenroll)
# Ploting the residuals
require(ggplot2)
reg3res <- fortify(reg3)
ggplot(reg3res, aes(x = .fitted, y = .resid)) + geom_point()
#
# Checking if residuals are normal
require(ggfortify)
require(gvlma)
autoplot(reg3)
gvlma(reg3)
#
load("meap93.RData")
library("stats")
math10 = matrix(data$math10)
ltotcomp = matrix(data$ltotcomp)
lstaff = matrix(data$lstaff)
lenroll = matrix(data$lenroll)
n = nrow(math10)
unos = matrix(1, nrow = n, ncol=1) # Vector de unos
X = matrix(c(unos, ltotcomp, lstaff, lenroll),n)
k = ncol(X)
gl = n-k
## Ahora veremos las variables en logaritmos
require(ggplot2)
require(reshape2)
data2 = melt(data, id.vars='math10')
ggplot(data2) + geom_jitter(aes(value,math10, colour=variable),) + geom_smooth(aes(value,math10, colour=variable), method=lm, se=FALSE) + facet_wrap(~variable, scales="free_x")+labs(x = "Levels", y = "perc studs passing MEAP math")
##
reg3 = lm(math10 ~ ltotcomp + lstaff + lenroll)
# Ploting the residuals
require(ggplot2)
reg3res <- fortify(reg3)
ggplot(reg3res, aes(x = .fitted, y = .resid)) + geom_point()
#
reg3
# Checking if residuals are normal
require(ggfortify)
require(gvlma)
autoplot(reg3)
gvlma(reg3)
#
